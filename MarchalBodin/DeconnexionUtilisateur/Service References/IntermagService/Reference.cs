//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DeconnexionUtilisateur.IntermagService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IntermagService.IIntermagService")]
    public interface IIntermagService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIntermagService/IsAlive", ReplyAction="http://tempuri.org/IIntermagService/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIntermagService/CreateCommand", ReplyAction="http://tempuri.org/IIntermagService/CreateCommandResponse")]
        string CreateCommand(string data, string targetDb, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIntermagService/SetDoRef", ReplyAction="http://tempuri.org/IIntermagService/SetDoRefResponse")]
        string SetDoRef(string clientPiece, string targetDatabase, string fournPiece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIntermagService/ToggleVerrou", ReplyAction="http://tempuri.org/IIntermagService/ToggleVerrouResponse")]
        string ToggleVerrou(string db, string doPiece);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIntermagService/GetUsers", ReplyAction="http://tempuri.org/IIntermagService/GetUsersResponse")]
        MBCore.Model.User[] GetUsers(string dbName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIntermagService/deleteUserSession", ReplyAction="http://tempuri.org/IIntermagService/deleteUserSessionResponse")]
        string deleteUserSession(string dbName, string cbSession);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIntermagService/killUser", ReplyAction="http://tempuri.org/IIntermagService/killUserResponse")]
        string killUser(string dbName, string hostName, string ntUseName, string hostProcess, string cbSession);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIntermagServiceChannel : DeconnexionUtilisateur.IntermagService.IIntermagService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IntermagServiceClient : System.ServiceModel.ClientBase<DeconnexionUtilisateur.IntermagService.IIntermagService>, DeconnexionUtilisateur.IntermagService.IIntermagService {
        
        public IntermagServiceClient() {
        }
        
        public IntermagServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IntermagServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IntermagServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IntermagServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public string CreateCommand(string data, string targetDb, int type) {
            return base.Channel.CreateCommand(data, targetDb, type);
        }
        
        public string SetDoRef(string clientPiece, string targetDatabase, string fournPiece) {
            return base.Channel.SetDoRef(clientPiece, targetDatabase, fournPiece);
        }
        
        public string ToggleVerrou(string db, string doPiece) {
            return base.Channel.ToggleVerrou(db, doPiece);
        }
        
        public MBCore.Model.User[] GetUsers(string dbName) {
            return base.Channel.GetUsers(dbName);
        }
        
        public string deleteUserSession(string dbName, string cbSession) {
            return base.Channel.deleteUserSession(dbName, cbSession);
        }
        
        public string killUser(string dbName, string hostName, string ntUseName, string hostProcess, string cbSession) {
            return base.Channel.killUser(dbName, hostName, ntUseName, hostProcess, cbSession);
        }
    }
}
